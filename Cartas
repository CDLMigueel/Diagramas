import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Blackjack {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Crear la baraja
        List<Card> deck = createDeck();
        Collections.shuffle(deck);

        // Inicializar manos de jugador y crupier
        List<Card> playerHand = new ArrayList<>();
        List<Card> dealerHand = new ArrayList<>();

        // Repartir cartas iniciales
        dealInitialCards(deck, playerHand, dealerHand);

        // Juego principal
        playGame(scanner, deck, playerHand, dealerHand);

        scanner.close();
    }

    // Representación de una carta
    static class Card {
        String suit;
        String rank;
        int value;

        Card(String suit, String rank, int value) {
            this.suit = suit;
            this.rank = rank;
            this.value = value;
        }

        @Override
        public String toString() {
            return rank + " of " + suit;
        }
    }

    // Crear una baraja de cartas
    private static List<Card> createDeck() {
        List<Card> deck = new ArrayList<>();
        String[] suits = {"Hearts", "Diamonds", "Clubs", "Spades"};
        String[] ranks = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};

        for (String suit : suits) {
            for (int i = 0; i < ranks.length; i++) {
                int value = (i < 9) ? i + 2 : 10; // Asignar valores a las cartas numéricas y figuras
                deck.add(new Card(suit, ranks[i], value));
            }
        }

        return deck;
    }

    // Repartir cartas iniciales
    private static void dealInitialCards(List<Card> deck, List<Card> playerHand, List<Card> dealerHand) {
        for (int i = 0; i < 2; i++) {
            playerHand.add(deck.remove(0));
            dealerHand.add(deck.remove(0));
        }

        System.out.println("Tu mano: " + playerHand);
        System.out.println("Carta visible del crupier: " + dealerHand.get(0));
    }

    // Juego principal
    private static void playGame(Scanner scanner, List<Card> deck, List<Card> playerHand, List<Card> dealerHand) {
        while (true) {
            // Verificar si algún jugador tiene 21
            if (getHandValue(playerHand) == 21) {
                System.out.println("¡Blackjack! ¡Ganaste!");
                break;
            } else if (getHandValue(dealerHand) == 21) {
                System.out.println("¡El crupier tiene Blackjack! ¡Perdiste!");
                break;
            }

            // Turno del jugador
            playerTurn(scanner, deck, playerHand, dealerHand);

            // Verificar si el jugador se pasa de 21
            if (getHandValue(playerHand) > 21) {
                System.out.println("Te has pasado de 21. ¡Perdiste!");
                break;
            }

            // Turno del crupier
            dealerTurn(deck, dealerHand);

            // Verificar resultados
            determineWinner(playerHand, dealerHand);

            // Preguntar al jugador si quiere jugar otra mano
            System.out.println("¿Quieres jugar otra mano? (s/n)");
            String response = scanner.nextLine().toLowerCase();

            if (!response.equals("s")) {
                break;
            }

            // Preparar para una nueva mano
            resetHands(deck, playerHand, dealerHand);
        }
    }

    // Turno del jugador
    private static void playerTurn(Scanner scanner, List<Card> deck, List<Card> playerHand, List<Card> dealerHand) {
        System.out.println("¿Qué deseas hacer? (Pedir/Cerrar)");
        String action = scanner.nextLine().toLowerCase();

        while (action.equals("pedir")) {
            playerHand.add(deck.remove(0));
            System.out.println("Tu mano: " + playerHand);

            if (getHandValue(playerHand) >= 21) {
                break;
            }

            System.out.println("¿Qué deseas hacer? (Pedir/Cerrar)");
            action = scanner.nextLine().toLowerCase();
        }
    }

    // Turno del crupier
    private static void dealerTurn(List<Card> deck, List<Card> dealerHand) {
        while (getHandValue(dealerHand) < 17) {
            dealerHand.add(deck.remove(0));
        }

        System.out.println("Mano del crupier: " + dealerHand);
    }

    // Determinar al ganador
    private static void determineWinner(List<Card> playerHand, List<Card> dealerHand) {
        int playerValue = getHandValue(playerHand);
        int dealerValue = getHandValue(dealerHand);

        System.out.println("Tu mano: " + playerHand + " (Valor: " + playerValue + ")");
        System.out.println("Mano del crupier: " + dealerHand + " (Valor: " + dealerValue + ")");

        if (playerValue > 21 || (dealerValue <= 21 && dealerValue >= playerValue)) {
            System.out.println("¡Perdiste!");
        } else {
            System.out.println("¡Ganaste!");
        }
    }

    // Calcular el valor de una mano de cartas
    private static int getHandValue(List<Card> hand) {
        int value = 0;
        int numAces = 0;

        for (Card card : hand) {
            value += card.value;

            if (card.rank.equals("Ace")) {
                numAces++;
            }
        }

        // Manejar los Ases (pueden valer 1 u 11)
        while (numAces > 0 && value > 21) {
            value -= 10;
            numAces--;
        }

        return value;
    }

    // Preparar para una nueva mano
    private static void resetHands(List<Card> deck, List<Card> playerHand, List<Card> dealerHand) {
        playerHand.clear();
        dealerHand.clear();
        Collections.shuffle(deck);

        // Repartir cartas iniciales para la nueva mano
        dealInitialCards(deck, playerHand, dealerHand);
    }
}
